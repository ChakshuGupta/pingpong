package edu.uci.iotproject;

import static edu.uci.iotproject.analysis.UserAction.Type;

import edu.uci.iotproject.analysis.TcpConversationUtils;
import edu.uci.iotproject.analysis.TrafficLabeler;
import edu.uci.iotproject.analysis.TriggerTrafficExtractor;
import edu.uci.iotproject.analysis.UserAction;
import edu.uci.iotproject.comparison.seqalignment.ExtractedSequence;
import edu.uci.iotproject.comparison.seqalignment.SequenceAlignment;
import edu.uci.iotproject.comparison.seqalignment.SequenceExtraction;
import edu.uci.iotproject.io.TriggerTimesFileReader;
import org.pcap4j.core.*;
import org.pcap4j.packet.namednumber.DataLinkType;

import java.io.EOFException;
import java.io.File;
import java.io.PrintWriter;
import java.net.UnknownHostException;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.TimeoutException;

/**
 * This is a system that reads PCAP files to compare
 * patterns of DNS hostnames, packet sequences, and packet
 * lengths with training data to determine certain events
 * or actions for smart home devices.
 *
 * @author Janus Varmarken
 * @author Rahmadi Trimananda (rtrimana@uci.edu)
 * @version 0.1
 */
public class Main {


    public static void main(String[] args) throws PcapNativeException, NotOpenException, EOFException, TimeoutException, UnknownHostException {
        // -------------------------------------------------------------------------------------------------------------
        // ------------ # Code for extracting traffic generated by a device within x seconds of a trigger # ------------
        // Paths to input and output files (consider supplying these as arguments instead) and IP of the device for
        // which traffic is to be extracted:
        String path = "/scratch/July-2018"; // Rahmadi
//        String path = "/Users/varmarken/temp/UCI IoT Project/experiments"; // Janus
        boolean verbose = true;
        final String onPairsPath = "/scratch/July-2018/on.txt";
        final String offPairsPath = "/scratch/July-2018/off.txt";

        // 1) D-Link July 26 experiment
//        final String inputPcapFile = path + "/2018-07/dlink/dlink.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-07/dlink/dlink-processed.pcap";
//        final String triggerTimesFile = path + "/2018-07/dlink/dlink-july-26-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .199 == dlink plug?

        // 2) TP-Link July 25 experiment
//        final String inputPcapFile = path + "/2018-07/tplink/tplink.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-07/tplink/tplink-processed.pcap";
//        final String triggerTimesFile = path + "/2018-07/tplink/tplink-july-25-2018.timestamps";
//        final String deviceIp = "192.168.1.159";

        // 2b) TP-Link July 25 experiment TRUNCATED:
        // Only contains "true local" events, i.e., before the behavior changes to remote-like behavior.
        // Last included event is at July 25 10:38:11; file filtered to only include packets with arrival time <= 10:38:27.
//        final String inputPcapFile = path + "/2018-07/tplink/tplink.wlan1.local.truncated.pcap";
//        final String outputPcapFile = path + "/2018-07/tplink/tplink-processed.truncated.pcap";
//        final String triggerTimesFile = path + "/2018-07/tplink/tplink-july-25-2018.truncated.timestamps";
//        final String deviceIp = "192.168.1.159";

        // 3) SmartThings Plug July 25 experiment
//        final String inputPcapFile = path + "/2018-07/stplug/stplug.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-07/stplug/stplug-processed.pcap";
//        final String triggerTimesFile = path + "/2018-07/stplug/smartthings-july-25-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .142 == SmartThings Hub (note: use eth0 capture for this!)

        // 4) Wemo July 30 experiment
//        final String inputPcapFile = path + "/2018-07/wemo/wemo.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-07/wemo/wemo-processed.pcap";
//        final String triggerTimesFile = path + "/2018-07/wemo/wemo-july-30-2018.timestamps";
//        final String deviceIp = "192.168.1.145";

        // 5) Wemo Insight July 31 experiment
//        final String inputPcapFile = path + "/2018-07/wemoinsight/wemoinsight.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-07/wemoinsight/wemoinsight-processed.pcap";
//        final String triggerTimesFile = path + "/2018-07/wemoinsight/wemo-insight-july-31-2018.timestamps";
//        final String deviceIp = "192.168.1.135";

        // 6) TP-Link Bulb August 1 experiment
//        final String inputPcapFile = path + "/2018-08/tplink-bulb/tplinkbulb.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/tplink-bulb/tplinkbulb-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/tplink-bulb/tplink-bulb-aug-3-2018.timestamps";
//        final String deviceIp = "192.168.1.246";

        // 7) Kwikset Doorlock August 6 experiment
//        final String inputPcapFile = path + "/2018-08/kwikset-doorlock/kwikset-doorlock.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/kwikset-doorlock/kwikset-doorlock-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/kwikset-doorlock/kwikset-doorlock-aug-6-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .142 == SmartThings Hub (note: use eth0 capture for this!)

        // 8) Hue Bulb August 7 experiment
//        final String inputPcapFile = path + "/2018-08/hue-bulb/hue-bulb.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/hue-bulb/hue-bulb-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/hue-bulb/hue-bulb-aug-7-2018.timestamps";
//        final String deviceIp = "192.168.1.246";

        // 9) Lifx Bulb August 8 experiment
//        final String inputPcapFile = path + "/2018-08/lifx-bulb/lifx-bulb.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/lifx-bulb/lifx-bulb-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/lifx-bulb/lifx-bulb-aug-8-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .231 == Lifx

        // 10) Amcrest Camera August 9 experiment
//        final String inputPcapFile = path + "/2018-08/amcrest-camera/amcrest-camera.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/amcrest-camera/amcrest-camera-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/amcrest-camera/amcrest-camera-aug-9-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .235 == camera

        // 11) Arlo Camera August 10 experiment
//        final String inputPcapFile = path + "/2018-08/arlo-camera/arlo-camera.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/arlo-camera/arlo-camera-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/arlo-camera/arlo-camera-aug-10-2018.timestamps";
//        final String deviceIp = "192.168.1.140"; // .246 == phone; .140 == camera

        // 12) Blossom sprinkler August 13 experiment
//        final String inputPcapFile = path + "/2018-08/blossom/blossom.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/blossom/blossom-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/blossom/blossom-aug-13-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .229 == sprinkler

        // 13) DLink siren August 14 experiment
//        final String inputPcapFile = path + "/2018-08/dlink-siren/dlink-siren.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/dlink-siren/dlink-siren-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/dlink-siren/dlink-siren-aug-14-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .183 == siren

        // 14) Nest thermostat August 15 experiment
//        final String inputPcapFile = path + "/2018-08/nest/nest.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/nest/nest-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/nest/nest-aug-15-2018.timestamps";
//        final String deviceIp = "192.168.1.246"; // .246 == phone; .127 == Nest thermostat

        // 15) Alexa August 16 experiment
//        final String inputPcapFile = path + "/2018-08/alexa/alexa.wlan1.local.pcap";
//        final String outputPcapFile = path + "/2018-08/alexa/alexa-processed.pcap";
//        final String triggerTimesFile = path + "/2018-08/alexa/alexa-aug-16-2018.timestamps";
//        final String deviceIp = "192.168.1.225"; // .246 == phone; .225 == Alexa
        // August 17
        final String inputPcapFile = path + "/2018-08/alexa/alexa2.wlan1.local.pcap";
        final String outputPcapFile = path + "/2018-08/alexa/alexa2-processed.pcap";
        final String triggerTimesFile = path + "/2018-08/alexa/alexa-aug-17-2018.timestamps";
        final String deviceIp = "192.168.1.225"; // .246 == phone; .225 == Alexa

        TriggerTimesFileReader ttfr = new TriggerTimesFileReader();
        List<Instant> triggerTimes = ttfr.readTriggerTimes(triggerTimesFile, false);
        // Tag each trigger with "ON" or "OFF", assuming that the first trigger is an "ON" and that they alternate.
        List<UserAction> userActions = new ArrayList<>();
        for (int i = 0; i < triggerTimes.size(); i++) {
            userActions.add(new UserAction(i % 2 == 0 ? Type.TOGGLE_ON : Type.TOGGLE_OFF, triggerTimes.get(i)));
        }
        TriggerTrafficExtractor tte = new TriggerTrafficExtractor(inputPcapFile, triggerTimes, deviceIp);
        final PcapDumper outputter = Pcaps.openDead(DataLinkType.EN10MB, 65536).dumpOpen(outputPcapFile);
        DnsMap dnsMap = new DnsMap();
        TcpReassembler tcpReassembler = new TcpReassembler();
        TrafficLabeler trafficLabeler = new TrafficLabeler(userActions);
        tte.performExtraction(pkt -> {
            try {
                outputter.dump(pkt);
            } catch (NotOpenException e) {
                e.printStackTrace();
            }
        }, dnsMap, tcpReassembler, trafficLabeler);
        outputter.flush();
        outputter.close();

        if (tte.getPacketsIncludedCount() != trafficLabeler.getTotalPacketCount()) {
            // Sanity/debug check
            throw new AssertionError(String.format("mismatch between packet count in %s and %s",
                    TriggerTrafficExtractor.class.getSimpleName(), TrafficLabeler.class.getSimpleName()));
        }

        // Extract all conversations present in the filtered trace.
        List<Conversation> allConversations = tcpReassembler.getTcpConversations();
        // Group conversations by hostname.
        Map<String, List<Conversation>> convsByHostname = TcpConversationUtils.groupConversationsByHostname(allConversations, dnsMap);
        System.out.println("Grouped conversations by hostname.");
        // For each hostname, count the frequencies of packet lengths exchanged with that hostname.
        final Map<String, Map<Integer, Integer>> pktLenFreqsByHostname = new HashMap<>();
        convsByHostname.forEach((host, convs) -> pktLenFreqsByHostname.put(host, TcpConversationUtils.countPacketLengthFrequencies(convs)));
        System.out.println("Counted frequencies of packet lengths exchanged with each hostname.");
        // For each hostname, count the frequencies of packet sequences (i.e., count how many conversations exchange a
        // sequence of packets of some specific lengths).
        final Map<String, Map<String, Integer>> pktSeqFreqsByHostname = new HashMap<>();
        convsByHostname.forEach((host, convs) -> pktSeqFreqsByHostname.put(host, TcpConversationUtils.countPacketSequenceFrequencies(convs)));
        System.out.println("Counted frequencies of packet sequences exchanged with each hostname.");
        // For each hostname, count frequencies of packet pairs exchanged with that hostname across all conversations
        final Map<String, Map<String, Integer>> pktPairFreqsByHostname =
                TcpConversationUtils.countPacketPairFrequenciesByHostname(allConversations, dnsMap);
        System.out.println("Counted frequencies of packet pairs per hostname");
        // For each user action, reassemble the set of TCP connections occurring shortly after
        final Map<UserAction, List<Conversation>> userActionToConversations = trafficLabeler.getLabeledReassembledTcpTraffic();
        final Map<UserAction, Map<String, List<Conversation>>> userActionsToConvsByHostname = trafficLabeler.getLabeledReassembledTcpTraffic(dnsMap);
        System.out.println("Reassembled TCP conversations occurring shortly after each user event");



        // Contains all ON events: hostname -> sequence identifier -> list of conversations with that sequence
        Map<String, Map<String, List<Conversation>>> ons = new HashMap<>();
        // Contains all OFF events: hostname -> sequence identifier -> list of conversations with that sequence
        Map<String, Map<String, List<Conversation>>> offs = new HashMap<>();
        userActionsToConvsByHostname.forEach((ua, hostnameToConvs) -> {
            Map<String, Map<String, List<Conversation>>> outer = ua.getType() == Type.TOGGLE_ON ? ons : offs;
            hostnameToConvs.forEach((host, convs) -> {
                Map<String, List<Conversation>> seqsToConvs = TcpConversationUtils.
                        groupConversationsByPacketSequence(convs, verbose);
                outer.merge(host, seqsToConvs, (oldMap, newMap) -> {
                    newMap.forEach((sequence, cs) -> oldMap.merge(sequence, cs, (list1, list2) -> {
                        list1.addAll(list2);
                        return list1;
                    }));
                    return oldMap;
                });
            });
        });


        // Print out all the pairs into a file for ON events
        File fileOnEvents = new File(onPairsPath);
        PrintWriter pwOn = null;
        try {
            pwOn = new PrintWriter(fileOnEvents);
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        for(Map.Entry<String, Map<String, List<Conversation>>> entry : ons.entrySet()) {
            Map<String, List<Conversation>> seqsToConvs = entry.getValue();
            for(Map.Entry<String, List<Conversation>> entryConv : seqsToConvs.entrySet()) {
                List<Conversation> listConv = entryConv.getValue();
                // Just get the first Conversation because all Conversations in this group
                // should have the same pairs of Application Data.
                for(Conversation conv : listConv) {
                    // Process only if it is a TLS packet
                    if (conv.isTls()) {
                        List<PcapPacket> tlsAppDataList = conv.getTlsApplicationDataPackets();
                        // Loop and print out packets
                        int count = 0;
                        // The direction of the first packet
                        Conversation.Direction firstDir = null;
                        // The length of the first packet
                        int firstLen = 0;
                        for (PcapPacket pcap : tlsAppDataList) {
                            boolean isPair = false;
                            if (count % 2 == 0) {
                                firstDir = conv.getDirection(pcap);
                                firstLen = pcap.length();
                            } else {// count%2 == 1
                                if(conv.getDirection(pcap) != firstDir) {
                                    isPair = true;
                                    pwOn.println(firstLen + ", " + pcap.length());
                                    //System.out.println(firstDir + ", " + conv.getDirection(pcap));
                                    //System.out.println(firstLen + ", " + pcap.length());
                                }
                            }
                            count++;
                            // If we can't create a pair then just pad it with 0
                            if (count == tlsAppDataList.size() && !isPair) {
                                pwOn.println(firstLen + ", 0");
                            }
                        }
                    } else { // Non-TLS conversations
                        List<PcapPacket> packetList = conv.getPackets();
                        // Loop and print out packets
                        int count = 0;
                        // The direction of the first packet
                        Conversation.Direction firstDir = null;
                        // The length of the first packet
                        int firstLen = 0;
                        for (PcapPacket pcap : packetList) {
                            boolean isPair = false;
                            if (count % 2 == 0) {
                                firstDir = conv.getDirection(pcap);
                                firstLen = pcap.length();
                            } else {// count%2 == 1
                                if(conv.getDirection(pcap) != firstDir) {
                                    isPair = true;
                                    pwOn.println(firstLen + ", " + pcap.length());
                                    System.out.println(firstDir + ", " + conv.getDirection(pcap));
                                    System.out.println(firstLen + ", " + pcap.length());
                                }
                            }
                            count++;
                            // If we can't create a pair then just pad it with 0
                            if (count == packetList.size() && !isPair) {
                                pwOn.println(firstLen + ", 0");
                            }
                        }
                    }
                }
            }
        }
        pwOn.close();

        // Print out all the pairs into a file for ON events
        File fileOffEvents = new File(offPairsPath);
        PrintWriter pwOff = null;
        try {
            pwOff = new PrintWriter(fileOffEvents);
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        for(Map.Entry<String, Map<String, List<Conversation>>> entry : offs.entrySet()) {
            Map<String, List<Conversation>> seqsToConvs = entry.getValue();
            for(Map.Entry<String, List<Conversation>> entryConv : seqsToConvs.entrySet()) {
                List<Conversation> listConv = entryConv.getValue();
                // Just get the first Conversation because all Conversations in this group
                // should have the same pairs of Application Data.
                for(Conversation conv : listConv) {
                    // Process only if it is a TLS packet
                    if (conv.isTls()) {
                        List<PcapPacket> tlsAppDataList = conv.getTlsApplicationDataPackets();
                        // Loop and print out packets
                        int count = 0;
                        // The direction of the first packet
                        Conversation.Direction firstDir = null;
                        // The length of the first packet
                        int firstLen = 0;
                        for (PcapPacket pcap : tlsAppDataList) {
                            boolean isPair = false;
                            if (count % 2 == 0) {
                                firstDir = conv.getDirection(pcap);
                                firstLen = pcap.length();
                            } else {// count%2 == 1
                                if(conv.getDirection(pcap) != firstDir) {
                                    isPair = true;
                                    pwOff.println(firstLen + ", " + pcap.length());
                                    System.out.println(firstDir + ", " + conv.getDirection(pcap));
                                    System.out.println(firstLen + ", " + pcap.length());
                                }
                            }
                            count++;
                            // If we can't create a pair then just pad it with 0
                            if (count == tlsAppDataList.size() && !isPair) {
                                pwOff.println(firstLen + ", 0");
                            }

                        }
                    } else { // Non-TLS conversations
                        List<PcapPacket> packetList = conv.getPackets();
                        // Loop and print out packets
                        int count = 0;
                        // The direction of the first packet
                        Conversation.Direction firstDir = null;
                        // The length of the first packet
                        int firstLen = 0;
                        for (PcapPacket pcap : packetList) {
                            boolean isPair = false;
                            if (count % 2 == 0) {
                                firstDir = conv.getDirection(pcap);
                                firstLen = pcap.length();
                            } else {// count%2 == 1
                                if(conv.getDirection(pcap) != firstDir) {
                                    isPair = true;
                                    pwOff.println(firstLen + ", " + pcap.length());
                                    System.out.println(firstDir + ", " + conv.getDirection(pcap));
                                    System.out.println(firstLen + ", " + pcap.length());
                                }
                            }
                            count++;
                            // If we can't create a pair then just pad it with 0
                            if (count == packetList.size() && !isPair) {
                                pwOff.println(firstLen + ", 0");
                            }
                        }
                    }
                }
            }
        }
        pwOff.close();


//        // ================================================================================================
//        // <<< Some work-in-progress/explorative code that extracts a "representative" sequence >>>
//        //
//        // Currently need to know relevant hostname in advance :(
//        String hostname = "events.tplinkra.com";
////        String hostname = "rfe-us-west-1.dch.dlink.com";
//        // Conversations with 'hostname' for ON events.
//        List<Conversation> onsForHostname = new ArrayList<>();
//        // Conversations with 'hostname' for OFF events.
//        List<Conversation> offsForHostname = new ArrayList<>();
//        // "Unwrap" sequence groupings in ons/offs maps.
//        ons.get(hostname).forEach((k,v) -> onsForHostname.addAll(v));
//        offs.get(hostname).forEach((k,v) -> offsForHostname.addAll(v));
//
//
//        Map<String, List<Conversation>> onsForHostnameGroupedByTlsAppDataSequence = TcpConversationUtils.groupConversationsByTlsApplicationDataPacketSequence(onsForHostname);
//
//
//        // Extract representative sequence for ON and OFF by providing the list of conversations with
//        // 'hostname' observed for each event type (the training data).
//        SequenceExtraction seqExtraction = new SequenceExtraction();
////        ExtractedSequence extractedSequenceForOn = seqExtraction.extract(onsForHostname);
////        ExtractedSequence extractedSequenceForOff = seqExtraction.extract(offsForHostname);
//
//        ExtractedSequence extractedSequenceForOn = seqExtraction.extractByTlsAppData(onsForHostname);
//        ExtractedSequence extractedSequenceForOff = seqExtraction.extractByTlsAppData(offsForHostname);
//
//        // Let's check how many ONs align with OFFs and vice versa (that is, how many times an event is incorrectly
//        // labeled).
//        int onsLabeledAsOff = 0;
//        Integer[] representativeOnSeq = TcpConversationUtils.getPacketLengthSequence(extractedSequenceForOn.getRepresentativeSequence());
//        Integer[] representativeOffSeq = TcpConversationUtils.getPacketLengthSequence(extractedSequenceForOff.getRepresentativeSequence());
//        SequenceAlignment<Integer> seqAlg = seqExtraction.getAlignmentAlgorithm();
//        for (Conversation c : onsForHostname) {
//            Integer[] onSeq = TcpConversationUtils.getPacketLengthSequence(c);
//            if (seqAlg.calculateAlignment(representativeOffSeq, onSeq) <= extractedSequenceForOff.getMaxAlignmentCost()) {
//                onsLabeledAsOff++;
//            }
//        }
//        int offsLabeledAsOn = 0;
//        for (Conversation c : offsForHostname) {
//            Integer[] offSeq = TcpConversationUtils.getPacketLengthSequence(c);
//            if (seqAlg.calculateAlignment(representativeOnSeq, offSeq) <= extractedSequenceForOn.getMaxAlignmentCost()) {
//                offsLabeledAsOn++;
//            }
//        }
//        System.out.println("");
//        // ================================================================================================
//
//
//        // -------------------------------------------------------------------------------------------------------------
//        // -------------------------------------------------------------------------------------------------------------
    }

}


// TP-Link MAC 50:c7:bf:33:1f:09 and usually IP 192.168.1.159 (remember to verify per file)
// frame.len >= 556 && frame.len <= 558 && ip.addr == 192.168.1.159